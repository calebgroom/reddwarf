#!/usr/bin/env bash
###############################################################################
# Reddwarf Continuous Integration Script                                      #
###############################################################################
#                                                                             #
# This script provides all the functionality to run all the steps from        #
# setting up the enviornment, resetting the nova database to running the      #
# test.                                                                       #
#                                                                             #
###############################################################################

# Global Configuration

AGENT_DIR=/src/reddwarf-guest

PYTHON_NOVACLIENT_VERSION=113
GLANCE_VERSION="ecbcc09ce5c337a84d8adf19f957529c4f76a075"
KEYSTONE_VERSION="f5d73af8f1bde3818f6d46cc0ccd327667d53535"

PACKAGE_VERSION="2012.21.12"

NOVA_HOME="/src"
NOVA_CONF="/home/vagrant/nova.conf"

GLANCE_HOME="/usr"
GLANCE_REG_CONF="/vagrant/conf/glance-registry.conf"
GLANCE_API_CONF="/vagrant/conf/glance-api.conf"

KEYSTONE_HOME="/keystone"
KEYSTONE_CONF="/etc/keystone/keystone.conf"

USERNET="br100"

PACKAGES_DIR="/var/www/debian/"
BUILD_DIR="/tmp/build/"

TEST_HOME="/src/integration/"
TESTS_CONF="/home/vagrant/tests.conf"

GUEST_IMAGE="debian-squeeze-x86_64-openvz.tar.gz"


###############################################################################
# Usage and list of available commands                                        #
###############################################################################

print_usage() {
    echo "Usage: $0 [command]"
    echo "
    Host Commands:
          vagrantci       - Run CI from the host

    Vm Commands (WARNING!: Run these outside of a VM at your own peril!):
          run             - Run install, build, initialize and test
          install         - Install all the required dependencies
          build           - Build the packages (including the agent)
          build-agent     - Builds only the agent package (runs during 'build')
          unit-tests      - Run unit tests
          initialize      - Initialize Reddwarf environment
          test-agent      - Run the agent functional tests
          test            - Run the Reddwarf integration tests
          start           - Start Reddwarf in a screen session
          stop            - Stop Reddwarf screen session
          repl            - Run the integration tests with a repl
          patch           - Apply the nova patch (runs during 'build')
          revert-patch    - Remove the nova patch
    "


    exit 1
}

###############################################################################


###############################################################################
# Utility functions
###############################################################################

APT_GET_ARGS="-y --allow-unauthenticated --force-yes"

exclaim () {
    echo "*******************************************************************************"
    echo "$@"
    echo "*******************************************************************************"
}

ip_chunk() {
    # Given 1-4 returns a bit of where the ip range starts.
    # Full IP= `ip_chunk 1`.`ip_chunk 2`.`ip_chunk 3`.`ip_chunk 4`
    get_ip_for_device $1 | cut -d. -f$2
}

get_ip_for_device() {
    /sbin/ifconfig $1 | awk '/inet addr/{gsub(/addr:/,"");print $2}'
}

pkg_install () {
    echo Installing $@...
    sudo -E DEBIAN_FRONTEND=noninteractive $HTTP_PROXY apt-get $APT_GET_ARGS install $@
}

pkg_remove () {
    echo Uninstalling $@...
    sudo -E apt-get $APT_GET_ARGS remove $@
}

set_home_dir() {
    self="${0#./}"
    base="${self%/*}"
    current=`pwd`
    if [ "$base" = "$self" ] ; then
        HOME="$current/"
    elif [[ $base =~ ^/ ]]; then
        HOME="$base/"
    else
        HOME="$current/$base/"
    fi
}

set_http_proxy() {
    if [ ! "${http_proxy}" = '' ]; then
        HTTP_PROXY="http_proxy=$http_proxy https_proxy=$https_proxy"
    fi
}

check_network() {
    # Check that network is first up and the apt repository reachable
    while true; do
        if (ping -c 1 -W 1 mirror.rackspace.com 2>&1); then
            break;
        else
            sudo ip route del default via 10.0.4.2
        fi
    done
}


###############################################################################

# Global generated args

setup_ips() {
    USERNET_IP=`get_ip_for_device $USERNET`
    INFRANET_IP="10.0.4.15"
}

###############################################################################
# Install all the required dependencies
###############################################################################

install_apt_cacher_ng() {
    exclaim "Installing Apt Cache NG..."
    APT_CACHER_CONF="/etc/apt-cacher-ng/acng.conf"
    pkg_install apt-cacher-ng
    echo 'Acquire::http { Proxy "http://'${INFRANET_IP}':3142"; };' | sudo tee /etc/apt/apt.conf.d/01proxy
    echo "BindAddress: ${INFRANET_IP}" | sudo tee -a $APT_CACHER_CONF
    sudo /etc/init.d/apt-cacher-ng restart
    sudo apt-get update
}

install_apt_repo() {
    exclaim "Installing Apt Repo...using reprepro"
    DUPLOAD_CONF="/etc/dupload.conf"
    pkg_install reprepro

    # install the apt repo from /var/www
    # add distributions file to conf
    # TODO (rnirmal): (This should be /var/lib/packages)
    sudo mkdir -p $PACKAGES_DIR/{conf,incoming}

    echo 'Origin: Rackspace
Label: Rackspace
Codename: squeeze
Architectures: i386 amd64
Components: main
Description: Rackspace DBaaS APT Repository' | sudo tee $PACKAGES_DIR/conf/distributions

    # Add dupload stuff so we can upload if necessary
    sudo cp $DUPLOAD_CONF $DUPLOAD_CONF.bak
    echo '$cfg{"nova"} = {
    fqdn => "10.127.2.126",
    login => "apt-upload",
    method => "scpb",
    incoming => "/home/apt-upload/incoming_packages",
    dinstall_runs => 1,
};' | sudo tee -a $DUPLOAD_CONF

    echo "deb http://apt.rackspace.com/debian squeeze main" | sudo tee -a /etc/apt/sources.list
}

install_packages() {
    exclaim 'Installing Dependencies...'
    pkg_install git-core python-all python-setuptools python-sphinx \
        python-distutils-extra pep8 debhelper apache2 dupload bzr gawk \
        iptables ebtables screen curl rabbitmq-server lvm2 socat unzip \
        python-twisted python-mox python-ipy python-paste python-migrate \
        python-gflags python-greenlet python-libxml2 python-routes \
        python-netaddr python-pastedeploy python-eventlet python-novaclient \
        python-glance python-cheetah python-carrot python-tempita \
        python-sqlalchemy python-suds mysql-server python-mysqldb \
        python-paramiko python-lockfile python-pip cdbs python-mock uuid \
        python-webob python-m2crypto python-twisted-web python-boto \
        python-amqplib python-unittest2 python-feedparser python-kombu \
        python-pexpect python-beaker

    # The default version of pip Ubuntu installs is old.
    cd /tmp
    sudo pip install --upgrade pip
    sudo pip install proboscis
    cd -
}

install_open_iscsi() {
    exclaim "Installing and configuring Open ISCSI..."
    pkg_install open-iscsi

    # Update the conf file
    ISCSID_CONF=/etc/iscsi/iscsid.conf
    sudo sed -i 's/node.startup = manual/node.startup = automatic/' $ISCSID_CONF
    sudo sed -i 's/#node.session.auth.authmethod = CHAP/node.session.auth.authmethod = CHAP/' $ISCSID_CONF
    sudo sed -i 's/#node.session.auth.username = username/node.session.auth.username = username/' $ISCSID_CONF
    sudo sed -i 's/#node.session.auth.password = password/node.session.auth.password = password1234/' $ISCSID_CONF
    sudo sed -i 's/#discovery.sendtargets.auth.authmethod = CHAP/discovery.sendtargets.auth.authmethod = CHAP/' $ISCSID_CONF
    sudo sed -i 's/#discovery.sendtargets.auth.username = username/discovery.sendtargets.auth.username = username/' $ISCSID_CONF
    sudo sed -i 's/#discovery.sendtargets.auth.password = password/discovery.sendtargets.auth.password = password1234/' $ISCSID_CONF

    # Restart the iscsi initiator
    sudo /etc/init.d/open-iscsi restart
}

add_ppas() {
    echo "deb http://ppa.launchpad.net/$1/ubuntu maverick main" | sudo tee -a /etc/apt/sources.list
    shift
    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys $@
}

add_rabbit_repo() {
    echo "deb http://www.rabbitmq.com/debian/ testing main" | sudo tee -a /etc/apt/sources.list
    sudo wget http://www.rabbitmq.com/rabbitmq-signing-key-public.asc
    sudo apt-key add rabbitmq-signing-key-public.asc
}

add_apt_repos() {
    exclaim "Adding additional Apt repositories..."

    pkg_install python-software-properties
    # Get proper sphinx version from the drizzle ppa
    add_ppas drizzle-developers/ppa 06899068
    add_ppas bzr/ppa 73C60F57
    add_ppas openstack-release/2011.3 D702BF6B8C6C1EFD 7D21C2EC3D1B4472
    add_rabbit_repo
    sudo apt-get update
}

setup_ssh_keys() {
    exclaim 'Installing SSH keys...'
    pkg_install expect
    # Setup the keys for the vagrant user
    if [ ! -f /home/vagrant/.ssh/id_rsa.pub ]; then
        ssh-keygen -q -t rsa -N "" -f /home/vagrant/.ssh/id_rsa
        sudo ssh-keygen -q -t rsa -N "" -f /root/.ssh/id_rsa
    fi

    # Copy the public keys to the volume server
    /vagrant/scripts/sshcopy.exp /home/vagrant/.ssh/id_rsa.pub
    sudo /vagrant/scripts/sshcopy.exp /root/.ssh/id_rsa.pub
}

update_config() {
    exclaim "Updating configurations to use infra net..."
    # Set Rabbitmq to listen on infranet only
    echo "RABBITMQ_NODE_IP_ADDRESS=$INFRANET_IP" | sudo tee /etc/rabbitmq/rabbitmq-env.conf
    sudo /etc/init.d/rabbitmq-server restart

    # Set Mysql (Nova DB) to listen on infranet only
    sudo sed -i "s/^bind-address[ \t]*= 127.0.0.1/bind-address\t\t = $INFRANET_IP/g" /etc/mysql/my.cnf
    sudo /etc/init.d/mysql restart
}

install_sneaky_pete_deps() {
    exclaim "Installing Sneaky Pete dependencies."
    # Install all the stuff needed to build Sneaky Pete.
    cp -rf $AGENT_DIR/vagrant/initialize.sh ~/initialize-sp.sh
    chmod 700 ~/initialize-sp.sh
    ~/initialize-sp.sh
}

install_deps() {
    check_network
    sudo usermod -g root vagrant

    add_apt_repos
    setup_ssh_keys
    install_apt_cacher_ng
    install_packages
    install_open_iscsi
    update_config
    install_apt_repo
    install_sneaky_pete_deps
}


###############################################################################


###############################################################################
# Build nova, glance and reddwarf-api and nova-guest packages
# Use this to rebuild guest packages
###############################################################################


dbaas_pkg_build_dbaasmycnf() {
    exclaim "Building and uploading dbaasmycnf package..."

    cd $BUILD_DIR/dbaas/dbaas-mycnf
    sudo -E ./builddeb.sh
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze dbaas-mycnf
    sudo -E reprepro --ignore=wrongdistribution -Vb $PACKAGES_DIR include squeeze *.changes
}

dbaas_pkg_build_firstboot() {
    exclaim "Building and uploading firstboot package...."

    cd $BUILD_DIR/dbaas/firstboot
    sudo -E ./builddeb.sh
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze firstboot
    sudo -E reprepro --ignore=wrongdistribution -Vb $PACKAGES_DIR include squeeze *.changes
}

build_install_glance() {
    cd $BUILD_DIR
    git clone https://github.com/openstack/glance.git
    cd glance
    git checkout stable/diablo
    cp -R $BUILD_DIR/oizys/generic_package_scripts/glance_diablo_scripts/debian .

    pkg_install python-swift
    rm debian/*.upstart
    sed -i.bak "s/JENKINS_REVNO/$GIT_REVISION/g" debian/changelog
    DEB_BUILD_OPTIONS=nocheck,nodocs dpkg-buildpackage -rfakeroot -b -uc -us
    pkg_remove glance python-glance

    cd $BUILD_DIR
    sudo dpkg -i *glance*.deb
}

dbaas_pkg_install_glance() {
    exclaim "Installing Glance..."
    GLANCE_IMAGES="/glance_images/"

    # TODO(rnirmal): Just install python-glance and use the code. Don't need to repackage
    build_install_glance

    sudo cp $GLANCE_API_CONF /etc/glance/
    sudo cp $GLANCE_REG_CONF /etc/glance/

    sudo mkdir -p $GLANCE_IMAGES
    # Check to see if the glance images folder has files in it
    if [ "`ls $GLANCE_IMAGES/$GUEST_IMAGE`" == "" ]; then
        # If there are no files then we should curl the ovz image to the glance images folder
        sudo -E curl http://c629296.r96.cf2.rackcdn.com/$GUEST_IMAGE --output $GLANCE_IMAGES/$GUEST_IMAGE
    fi
}

dbaas_pkg_setup_keystone() {
    # Download keystone and setup
    sudo rm -rf $KEYSTONE_HOME
    sudo git clone https://github.com/openstack/keystone.git $KEYSTONE_HOME
    cd $KEYSTONE_HOME
    sudo git checkout -b stable $KEYSTONE_VERSION

    # Apply any patches if necessary
    sudo git am -3 /vagrant/patches/keystone/*

    # Install Dependenciens
    pkg_install python-lxml python-pastescript python-pysqlite2 python-httplib2

    sudo python setup.py install
    sudo mkdir -p /etc/keystone
    sudo mkdir -p /var/log/keystone
    sudo cp /vagrant/conf/keystone.conf $KEYSTONE_CONF
}

dbaas_pkg_install_novaclient() {
    pkg_install python-novaclient
}

dbaas_pkg_build_reddwarf_config() {
    cd $BUILD_DIR
    mkdir -p reddwarf-config
    cd reddwarf-config
    cp -R $BUILD_DIR/oizys/generic_package_scripts/reddwarf_config_diablo_scripts/debian .

    # Change config values
    sed -i.bak "s/JENKINS_REVNO/$GIT_REVISION/g" debian/changelog
    sed -i.bak "s/MYSQL_USER/nova/g" debian/guest.conf
    sed -i.bak "s/MYSQL_PASS/novapass/g" debian/guest.conf
    sed -i.bak "s/MYSQL_HOST/$INFRANET_IP/g" debian/guest.conf
    sed -i.bak "s/RABBIT_HOST/$INFRANET_IP/g" debian/guest.conf
    sed -i.bak "s/RABBIT_PORT/5672/g" debian/guest.conf
    sed -i.bak "s/RABBIT_USER/guest/g" debian/guest.conf
    sed -i.bak "s/RABBIT_PASS/guest/g" debian/guest.conf
    DEB_BUILD_OPTIONS=nocheck,nodocs dpkg-buildpackage -rfakeroot -b -uc -us
}

dbaas_pkg_build_nova() {
    exclaim "Building Nova packages..."

    cd $BUILD_DIR
    mkdir -p $BUILD_DIR/dbaas
    cd dbaas
    cp -R $NOVA_HOME/* .
    cp -R $BUILD_DIR/oizys/generic_package_scripts/nova_diablo_scripts/debian .
    sed -i.bak "s/JENKINS_REVNO/$GIT_REVISION/g" debian/changelog

    DEB_BUILD_OPTIONS=nocheck,nodocs dpkg-buildpackage -rfakeroot -b -uc -us
}

dbaas_pkg_upload_nova() {
    exclaim "Removing old versions of the packages and adding new ones..."
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-ajax-console-proxy
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-api
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-common
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-compute
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-compute-kvm
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-compute-lxc
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-compute-uml
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-compute-xen
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-compute-openvz
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-doc
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-dns
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-guest
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-reaper
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-instancemonitor
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-network
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-objectstore
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-scheduler
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-vncproxy
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze nova-volume
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze reddwarf-api
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze reddwarf-mgmt-api
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze python-nova
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze python-glance
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze python-glance-doc
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze glance
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze reddwarf-config

    cd $BUILD_DIR
    sudo -E reprepro --ignore=wrongdistribution -Vb $PACKAGES_DIR includedeb squeeze reddwarf-config_${PACKAGE_VERSION}-${GIT_REVISION}*_all.deb
    sudo -E reprepro --ignore=wrongdistribution -Vb $PACKAGES_DIR include squeeze nova_${PACKAGE_VERSION}-${GIT_REVISION}*_amd64.changes
    sudo -E reprepro --ignore=wrongdistribution -Vb $PACKAGES_DIR include squeeze glance_2011.3-${GIT_REVISION}*_amd64.changes
}


dbaas_pkg_build_sneaky_pete() {
    exclaim "Building and packaging Sneaky Pete..."

    # Build new package

    # Clean this to prevent any shenanigans.
    if [ "$1" != "no-clean" ]; then
        rm -rf $AGENT_DIR/bin
    fi
    cd $AGENT_DIR
    sudo DEB_BUILD_OPTIONS=nocheck,nodocs dpkg-buildpackage -rfakeroot -b -uc -us

    exclaim Guest packaging finished, moving to $BUILD_DIR.
    mv -f $AGENT_DIR/../nova-guest*_all.deb $BUILD_DIR/
    mv -f $AGENT_DIR/../nova-guest*_amd64.changes $BUILD_DIR/

    exclaim Creating Dopple-Pete...
    cd $AGENT_DIR
    # Make the version call return some nonsense.
    echo '
          #ifndef __NOVA_GUEST_VERSION_H
          #define __NOVA_GUEST_VERSION_H

          #define NOVA_GUEST_CURRENT_VERSION "Dopple-Pete"

          #endif //__NOVA_GUEST_VERSION_H
         ' > bin/gcc-4.4.5/release/link-static/nova_guest_version.hpp
    # Delete the binary just in case Boost Build attempts deception.
    rm -f bin/gcc-4.4.5/release/link-static/nova-guest
    # Update the changelog so the new version comes from the future.
    sudo sed -i.bak "s/2012/2013/g" debian/changelog
    # Build and package it again
    sudo DEB_BUILD_OPTIONS=nocheck,nodocs dpkg-buildpackage -rfakeroot -b -uc -us
    # Revert the changelog.
    sudo sed -i.bak "s/2013/2012/g" debian/changelog

    exclaim Dopple-Pete packaging finished, moving to $BUILD_DIR.
    mv -f $AGENT_DIR/../nova-guest*_all.deb $BUILD_DIR/
    mv -f $AGENT_DIR/../nova-guest*_amd64.changes $BUILD_DIR/
}

dpkg_restore_normal_pete() {
    remove_agent_pkg
    # Installs the "Dopple-Pete" package create by dbaas_pkg_build_sneaky_pete
    # and puts it in the repo so that the next install or upgrade will use it.
    sudo -E reprepro --ignore=wrongdistribution -Vb $PACKAGES_DIR include squeeze $BUILD_DIR/nova-guest_2012*_amd64.changes
}

dpkg_summon_dopple_pete() {
    # Installs the "Dopple-Pete" package create by dbaas_pkg_build_sneaky_pete
    # and puts it in the repo so that the next install or upgrade will use it.
    sudo -E reprepro --ignore=wrongdistribution -Vb $PACKAGES_DIR include squeeze $BUILD_DIR/nova-guest_2013*_amd64.changes
}

patch_src_dir() {
    cd $NOVA_HOME
    patch -r - -Np1 < $NOVA_HOME/patches/compute.patch
    patch -r - -Np1 < $NOVA_HOME/patches/nova_api.patch
    patch -r - -Np1 < $NOVA_HOME/patches/nova_db.patch
    patch -r - -Np1 < $NOVA_HOME/patches/utils.patch
}

revert_patch() {
    cd $NOVA_HOME
    patch -r - -Rp1 < $NOVA_HOME/patches/compute.patch
    patch -r - -Rp1 < $NOVA_HOME/patches/nova_api.patch
    patch -r - -Rp1 < $NOVA_HOME/patches/nova_db.patch
    patch -r - -Rp1 < $NOVA_HOME/patches/utils.patch
}

build() {
    GIT_REVISION=`git --git-dir=${NOVA_HOME}/.git rev-parse HEAD`

    # Clean the cacher-ng mirror so that old versions of our code are removed
    sudo rm -rf /var/cache/apt-cacher-ng/apt.rackspace.com/

    # Clean the build dir
    sudo rm -rf $BUILD_DIR
    mkdir -p $BUILD_DIR
    cd $BUILD_DIR
    git clone https://github.com/hub-cap/oizys.git

    dbaas_pkg_setup_keystone
    dbaas_pkg_install_novaclient
    dbaas_pkg_install_glance
    dbaas_pkg_build_reddwarf_config
    dbaas_pkg_build_nova
    dbaas_pkg_upload_nova
    dbaas_pkg_build_dbaasmycnf
    dbaas_pkg_build_firstboot
    dbaas_pkg_build_sneaky_pete
    sudo apt-get update
    patch_src_dir
}

remove_agent_pkg() {
    sudo -E reprepro -Vb /var/www/debian remove squeeze nova-guest

    sudo rm -rf /var/cache/apt-cacher-ng/apt.rackspace.com/debian/pool/main/n/nova-guest
    sudo apt-get update
}

build_agent() {
    echo "Quick building the Agent."
    remove_agent_pkg

    GIT_REVISION=`git --git-dir=${NOVA_HOME}/.git rev-parse HEAD`

    mkdir -p $BUILD_DIR
    cd $BUILD_DIR
    # git clone https://github.com/hub-cap/oizys.git

    dbaas_pkg_build_sneaky_pete no-clean
    sudo apt-get update
}

repkg_agent_with_nonsense_version() {
    modify_pkg = $BUILD_DIR/oizys/generic_package_scripts/modify_package.sh
    deb_full_path = $BUILD_DIR/nova-guest_2012.21.12_all.deb
    old_version_string = $1
    $modify_pkg $deb_full_path $old_version_string $new_version_string
}


###############################################################################


###############################################################################
# Run unit-tests
###############################################################################

run_unit_tests() {
    cd $NOVA_HOME
    touch $NOVA_HOME/clean.sqlite
    exclaim "Running Reddwarf Unit Tests..."
    UNITTEST_FIXTURE=reddwarf $NOVA_HOME/run_tests.sh -N $@
    exclaim "Running RSDNS Unit Tests..."
    UNITTEST_FIXTURE=rsdns $NOVA_HOME/run_tests.sh -N $@
    exclaim "Running OpenVZ Driver NOVA Unit Tests..."
    UNITTEST_FIXTURE=nova /src/run_tests.sh -N test_ovz
}


###############################################################################
# Initialize or re-initalize nova
#
# Clean the Nova environment removing all vms, volumes and database entries
# Setup all the configuration and database entries
###############################################################################
###############################################################################

GLANCE_SQL_CONNECTION="--sql-connection=mysql://nova:novapass@${INFRANET_IP}/glance"
NOVA_SQL_CONNECTION="--sql_connection=mysql://nova:novapass@${INFRANET_IP}/nova"

mysql_query () {
    mysql -u root -e "$1"
}

glance_manage () {
    echo glance-manage $@
    $GLANCE_HOME/bin/glance-manage --config-file=$GLANCE_REG_CONF $@
}

nova_manage () {
    echo nova-manage $@
    $NOVA_HOME/bin/nova-manage --flagfile=$NOVA_CONF $@
}

reddwarf_manage () {
    echo reddwarf-manage $@
    $NOVA_HOME/bin/reddwarf-manage --flagfile=$NOVA_CONF $@
}

keystone_manage () {
    echo keystone-manage $@
    sudo $KEYSTONE_HOME/bin/keystone-manage -c $KEYSTONE_CONF $@
}

# Delete all extra IPs grabbed by Nova.
delete_extra_ips() {
    for (( x=0; x <= `ip_chunk $1 4`; x += 1))
    do
        mysql_query "DELETE FROM nova.fixed_ips WHERE address='$2.$x';"
    done
}

setup_nova_db() {
    # Drop these in case this command is being run again.
    mysql_query "DROP DATABASE IF EXISTS nova;"
    mysql_query "DROP DATABASE IF EXISTS glance;"
    mysql_query "DROP DATABASE IF EXISTS keystone;"

    mysql_query "CREATE DATABASE nova;"
    mysql_query "CREATE DATABASE glance;"
    mysql_query "CREATE DATABASE keystone;"
    mysql_query "GRANT ALL PRIVILEGES ON *.* TO 'nova'@'%' IDENTIFIED BY 'novapass' WITH GRANT OPTION;"
    mysql_query "DELETE FROM mysql.user WHERE User='root' AND Host!='localhost';"
    mysql_query "DELETE FROM mysql.user WHERE User='';"
    mysql_query "FLUSH PRIVILEGES;"
}

glance_cleanup() {
    sudo rm -rf /var/lib/glance
    sudo mkdir -p /var/lib/glance/images
    sudo rm -rf /vz/template/cache/*
}

setup_nova_conf() {
    cat /vagrant/conf/nova.conf.template > $NOVA_CONF
    # Add the domain name, make it different each time
    uuid | sed s/^/--dns_domain_name=/ | sed s/$/-dbaas-tests.com/  >> $NOVA_CONF
    if [ -d /extra ]; then
        cat /extra/nova.conf >> $NOVA_CONF
    fi

    # Copy and update the paste.ini files
    cp /src/etc/nova/api-paste_keystone.ini /home/vagrant
    cp /src/etc/nova/reddwarf-api-paste.ini /home/vagrant
}
###############################################################################
# Install all the required dependencies
###############################################################################

setup_tests_conf() {
    cat /vagrant/conf/host.tests.conf_begin > $TESTS_CONF
    echo "\"guest-update-test\" : {
          	    \"next-version\" : \"Dopple-Pete\",
          	    \"install-repo-cmd\" : [\"reprepro\",
          	                            \"--basedir=/tmp/build\",
          	                            \"--ignore=wrongdistribution\", \"-Vb\",
          	                           \"$PACKAGES_DIR\", \"include\",
          	                           \"squeeze\",
          	                       \"$BUILD_DIR/nova-guest_2013.21.12_amd64.changes\"
                ]
          	}," >> $TESTS_CONF
    echo "\"agent_bin\" : \"$AGENT_DIR/bin/gcc-4.4.5/release/link-static/nova-guest\", " >> $TESTS_CONF
    echo "\"host_name\" : \"`hostname`\", " >> $TESTS_CONF
    cat /vagrant/conf/host.tests.conf_end >> $TESTS_CONF
}

glance_initialize() {
    glance_manage version_control
    glance_manage db_sync
}

keystone_initialize() {
    # Keystone - Add a regular system admin
    AUTH_TENANT="dbaas"
    AUTH_USER="admin"
    AUTH_PASSWORD="admin"
    AUTH_ADMIN_ROLE="Admin"
    keystone_manage tenant add $AUTH_TENANT
    keystone_manage user add $AUTH_USER $AUTH_PASSWORD $AUTH_TENANT
    keystone_manage role add $AUTH_ADMIN_ROLE
    keystone_manage role grant $AUTH_ADMIN_ROLE $AUTH_USER
    keystone_manage role grant $AUTH_ADMIN_ROLE $AUTH_USER $AUTH_TENANT

    # Add "Boss" and "Chunk"
    keystone_manage user add Boss admin dbaas
    keystone_manage user add chunk chunk dbaas

    SERVICE_ADMIN_USER="service-admin"
    SERVICE_ADMIN_PASSWORD="serviceadmin"
    SERVICE_ADMIN_ROLE="KeystoneServiceAdmin"
    keystone_manage user add $SERVICE_ADMIN_USER $SERVICE_ADMIN_PASSWORD
    keystone_manage role add $SERVICE_ADMIN_ROLE
    keystone_manage role grant $SERVICE_ADMIN_ROLE $SERVICE_ADMIN_USER

    SERVICE_REGION="ci"
    REDDWARF_SERVICE_NAME="reddwarf"
    NOVA_SERVICE_NAME="nova"
    REDDWARF_SERVICE_URL="http://localhost:8775/v1.0/%tenant_id%"
    NOVA_SERVICE_URL="http://localhost:8774/v1.1/%tenant_id%"
    keystone_manage service add $REDDWARF_SERVICE_NAME
    keystone_manage service add $NOVA_SERVICE_NAME
    keystone_manage endpointTemplates add $SERVICE_REGION $REDDWARF_SERVICE_NAME $REDDWARF_SERVICE_URL $REDDWARF_SERVICE_URL $REDDWARF_SERVICE_URL 1 0
    keystone_manage endpointTemplates add $SERVICE_REGION $NOVA_SERVICE_NAME $NOVA_SERVICE_URL $NOVA_SERVICE_URL $NOVA_SERVICE_URL 1 0
    keystone_manage endpoint add $AUTH_TENANT 1
    keystone_manage endpoint add $AUTH_TENANT 2

    # Add new project and user separate
    keystone_manage tenant add daffy
    keystone_manage endpoint add daffy 1
    keystone_manage endpoint add daffy 2
    keystone_manage user add daffy daffy daffy

    # Added this user for example generator
    keystone_manage tenant add 1234
    keystone_manage user add examples examples 1234
    keystone_manage role grant $AUTH_ADMIN_ROLE examples
    keystone_manage role grant $AUTH_ADMIN_ROLE examples 1234
    keystone_manage endpoint add 1234 1
    keystone_manage endpoint add 1234 2
}

nova_initialize() {
    dpkg_restore_normal_pete

    nova_manage db sync
    nova_manage user admin admin admin admin
    nova_manage user admin boss admin admin
    nova_manage project create dbaas admin

    # Added this for example generator
    nova_manage user admin examples examples examples
    nova_manage project create 1234 examples

    reddwarf_manage db sync
}

setup_dns() {
    if [ ! -z "$SETUP_DNS" ]; then
        exclaim "Setting up DNS..."
        # Make sure the domain name exists (must happen before the image is added)
        ADD_DOMAINS=True run_tests --group=rsdns.domains

        # add the dns domain id to the nova.conf
        cat /home/vagrant/dns_resource.txt | sed s/^/--dns_domain_id=/ >> $NOVA_CONF
    fi
}

upload_glance_image() {
    # Install glance_image if one isn't found.
    if [ ! -f /var/lib/glance/images/1 ]; then
        echo "Installing Glance Image."
        cd $TEST_HOME
        sudo INSTALL_GLANCE_IMAGE=True NOVASRC=$NOVA_HOME $TEST_HOME/run_tests_nv.sh --conf=$TESTS_CONF --group=services.initialize.glance
        if [ ! -f /var/lib/glance/images/1 ]; then
            echo "ERROR: The glance image didn't not get uploaded correctly. Rerun initialize"
            exit 1
        fi
    fi
}

setup_networking() {
    exclaim "Setting up Networking"

    # This next value will be something like '10.0.0'
    ip_startbr100=`ip_chunk br100 1`.`ip_chunk br100 2`.`ip_chunk br100 3`
    # ip_startbr200=`ip_chunk br200 1`.`ip_chunk br200 2`.`ip_chunk br200 3`

    gateway_ip=`/sbin/ifconfig $USERNET|grep 'inet '|sed 's/:/ /g'|sed 's/ \+/ /g'| cut -d' ' -f4`
    dns_ip=`grep -m1 nameserver /etc/resolv.conf |cut -d' ' -f2`

    echo "--flat_network_dns=$dns_ip" >> $NOVA_CONF

    # Can't figure out the CIDR rules, so I'm giving it 256 ips.
    nova_manage network create --label=usernet --fixed_range_v4=$ip_startbr100.0/24 --num_networks=1 --network_size=256 --bridge=br100 --bridge_interface=eth0 --dns1=$dns_ip
    #nova_manage network create --label=infranet --fixed_range_v4=$ip_startbr200.0/24 --num_networks=1 --network_size=256 --bridge=br200 --bridge_interface=eth1 --dns1=$dns_ip
    hostname=`hostname`

    # Assume there is only one network and `update all rows.
    mysql_query "UPDATE nova.networks SET gateway='$gateway_ip';"
    mysql_query "UPDATE nova.networks SET host='$hostname';"

    delete_extra_ips br100 $ip_startbr100
    #delete_extra_ips br200 $ip_startbr200
}

reset_services() {
    # Remove all the devices on the Host
    sudo iscsiadm -m node --logout

    # Remove vz private area
    for i in `sudo vzlist --all --output ctid --no-header` ; do sudo vzctl stop $i && sudo vzctl destroy $i ; done
    sudo rm -fr /var/lib/vz/private/*

    # Delete all of the volumes on the Volumes VM since the DB will now
    # be out of sync.
    ssh vagrant@33.33.33.11 "sudo /vagrant/volumeserver delete"

    # Manually remove the nodes & send_targets
    sudo rm -fr /etc/iscsi/nodes
    sudo rm -fr /etc/iscsi/send_targets

    # Restart Rabbit MQ so all the old queues are cleared
    sudo /etc/init.d/rabbitmq-server restart
}

initialize() {
    exclaim "Initializing Nova...."

    setup_nova_db
    glance_cleanup

    setup_nova_conf
    setup_tests_conf

    glance_initialize
    nova_initialize
    keystone_initialize

    setup_dns
    upload_glance_image
    setup_networking

    reset_services
}

###############################################################################
# Run the CI Tests
###############################################################################

run_agent_tests() {
    cd $AGENT_DIR
    echo "Agent tests : AMQP"
    TEST_ARGS=--flagfile=$AGENT_DIR/config/test.nova.conf bjam -d+2 debug send_and_receive

    echo "Agent tests : MySQL"
    TEST_ARGS=--flagfile=$AGENT_DIR/config/test.nova.conf bjam -d+2 debug int_tests_mysql

    echo "Agent tests : DB API"
    TEST_ARGS=--flagfile=$AGENT_DIR/config/test.nova.conf bjam -d+2 debug api_tests

    echo "Agent tests : APT"
    TEST_ARGS=--flagfile=$AGENT_DIR/config/test.nova.conf bjam -d+2 debug apt_tests

    echo "Agent tests : MySqlNovaUpdater"
    TEST_ARGS=--flagfile=$AGENT_DIR/config/test.nova.conf bjam -d+2 debug mysql_nova_updater_tests

    echo "Agent tests : Rabbit Reconnects"
    run_tests --group=agent
}

run_tests() {
    cd $TEST_HOME
    echo "run_tests args: $@"
    if [ $# -lt 1 ]; then
        sudo -E NOVASRC=$NOVA_HOME $TEST_HOME/run_tests_nv.sh --conf=$TESTS_CONF --group=host.ovz
    else
        sudo -E NOVASRC=$NOVA_HOME $TEST_HOME/run_tests_nv.sh --conf=$TESTS_CONF $@
    fi
}

run_host_tests() {
    cd $TEST_HOME
    sudo -E NOVASRC=$NOVA_HOME $TEST_HOME/run_tests_nv.sh --conf=$TESTS_CONF --group=dbaas.guests
}

###############################################################################


###############################################################################
# All in One run the complete CI steps
#
# 1. Install
# 2. Build
# 3. Initialize
# 4. Test
###############################################################################
###############################################################################

run_ci() {
    install_deps
    build
    run_unit_tests --no-pep8
    initialize
    run_agent_tests
    run_tests $@
}

###############################################################################
# Start a Python REPL that works just like the test environment.
###############################################################################
###############################################################################

repl() {
    INT_TEST_OPTIONS=-i run_tests --group=_does_not_exist_ $@
}

###############################################################################



###############################################################################
# Start Reddwarf interactively in a screen session
###############################################################################
###############################################################################

function screen_it {
    screen -S nova -X screen -t $1
    screen -S nova -p $1 -X stuff "$2$NL"
}

start_reddwarf() {
    if [ ! -f ~/.screenrc ]; then
    cat >~/.screenrc <<EOF
hardstatus on
hardstatus alwayslastline
hardstatus string "%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G}%H %{..Y}%d/%m %c"

defscrollback 1024

vbell off
startup_message off
EOF
    fi

    NL=`echo -ne '\015'`

    screen -d -m -S nova -t nova
    sleep 1

    screen_it glance-reg "sudo $GLANCE_HOME/bin/glance-registry $GLANCE_REG_CONF --debug"
    screen_it glance-api "sudo $GLANCE_HOME/bin/glance-api $GLANCE_API_CONF --debug"

    screen_it keystone-admin "sudo $KEYSTONE_HOME/bin/keystone-admin -c $KEYSTONE_CONF"
    screen_it keystone-service "sudo $KEYSTONE_HOME/bin/keystone-auth -c $KEYSTONE_CONF"

    screen_it reddwarf "sudo $NOVA_HOME/bin/reddwarf-api --flagfile=$NOVA_CONF"
    screen_it nova-api "sudo $NOVA_HOME/bin/nova-api --flagfile=$NOVA_CONF"
    screen_it compute "sudo $NOVA_HOME/bin/nova-compute --flagfile=$NOVA_CONF"
    screen_it network "sudo $NOVA_HOME/bin/nova-network --flagfile=$NOVA_CONF"
    screen_it scheduler "sudo $NOVA_HOME/bin/nova-scheduler --flagfile=$NOVA_CONF"
    screen_it volume "sudo $NOVA_HOME/bin/nova-volume --flagfile=$NOVA_CONF"
    screen_it reaper "sudo $NOVA_HOME/bin/nova-reaper --flagfile=$NOVA_CONF"
    screen -S nova -x
}

###############################################################################
# Stop any active Reddwarf screen session
###############################################################################
###############################################################################

stop_reddwarf() {
    screen -S nova -X quit
    rm *.pid*
}

###############################################################################


###############################################################################
# Misc services and tests
###############################################################################
###############################################################################

show_dns_entries() {
    cd $NOVA_HOME
    export PYTHONPATH=$PYTHONPATH:$NOVA_HOME
    python integration/show_dns_entries.py --flagfile=$NOVA_CONF
}

###############################################################################


###############################################################################
# Various utils and commands to access the vagrant environment from the host
# machine without having to manually ssh into the vagrant environment
###############################################################################
###############################################################################

# Get all the information required to ssh into the host vm and run ci
vagrant_ssh() {
    VHOST=`vagrant ssh_config host | awk '/HostName/{print $2}'`
    VUSER=`vagrant ssh_config host | awk '/User /{print $2}'`
    VPORT=`vagrant ssh_config host | awk '/Port/{print $2}'`
    VIDFILE=`vagrant ssh_config host | awk '/IdentityFile/{print $2}'`
    echo ssh ${VUSER}@${VHOST} -p ${VPORT} -i ${VIDFILE} -o NoHostAuthenticationForLocalhost=yes "$@"
    ssh ${VUSER}@${VHOST} -p ${VPORT} -i ${VIDFILE} -o NoHostAuthenticationForLocalhost=yes "$@"
}

run_vagrant_ci() {
    shift
    echo vagrant_ssh $HTTP_PROXY $CI_RUN_VARS /vagrant/reddwarf-ci run $@
    vagrant_ssh $HTTP_PROXY $CI_RUN_VARS /vagrant/reddwarf-ci run $@
}

###############################################################################

###############################################################################
# Process the user provided command and run the appropriate command
###############################################################################

# Lets not run this as the root user
if [ $EUID -eq 0 ]; then
   echo "You are running this script as root. You need to run as a regular user"
   exit 1
fi

# Print the available commands
if [ $# -lt 1 ]; then
    print_usage
fi

# Set this to exit immediately on error
set -o errexit

set_home_dir
set_http_proxy

if [ "$1" != "vagrantci" ]; then
    setup_ips
fi

case "$1" in
    "vagrantci" ) run_vagrant_ci $@;;
    "run" ) shift; run_ci $@;;
    "install" ) install_deps;;
    "build" ) build;;
    "build-agent" ) build_agent $@;;
    "test-agent" ) shift; run_agent_tests $@;;
    "initialize" ) initialize;;
    "test" ) shift; run_tests $@;;
    "repl" ) repl $@;;
    "start" ) start_reddwarf;;
    "stop" ) stop_reddwarf;;
    "show_dns_entries" ) show_dns_entries;;
    "patch" ) patch_src_dir;;
    "revert-patch" ) revert_patch;;
    "unit-tests" ) shift; run_unit_tests $@;;
    "restore-guest" ) dpkg_restore_normal_pete;;
    "fake-update-guest" ) dpkg_summon_dopple_pete;;
    * )
        echo "'$1' not a valid command"
        exit 1
esac
